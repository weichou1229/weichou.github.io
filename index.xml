<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wei-Chou</title>
    <link>/</link>
    <description>Recent content on Wei-Chou</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 09 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About me</title>
      <link>/about/</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>webpack(4) use loader</title>
      <link>/post/webpack/2016-08-09-webpack-useloader/</link>
      <pubDate>Tue, 09 Aug 2016 16:00:00 +0000</pubDate>
      
      <guid>/post/webpack/2016-08-09-webpack-useloader/</guid>
      <description>本篇紀錄使用webpack loader來做模組或資源載入時的處理作業
github resource
Table of contents  npm package handling typescript typescript loader  1. npm package handling 　首先，我要把套件安裝的部分用npm設定檔來統一管理，在根目錄加上 package.json ,
所以在根目錄下指令npm init來幫助建立package.json.
 . ├── src/ | └── cats.js | └── dogs.js | └── app.js ├── bin/ | └── app.bundle.js ├── node_modules/ | └── webpack/ | └── ... ├── package.json #=&amp;gt; npm設定檔 └── web.config.js  然後把依賴的開發套件加入設定檔中
npm install --save-dev webpack html-webpack-plugin webpack-browser-plugin  跑完上面這個指令，就能看到npm安裝完套件，並加入依賴設定到package.json設定檔中
{ ... (省略) &amp;quot;author&amp;quot;: &amp;quot;Bruce&amp;quot;, &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;, &amp;quot;devDependencies&amp;quot;: { &amp;quot;html-webpack-plugin&amp;quot;: &amp;quot;^2.</description>
    </item>
    
    <item>
      <title>webpack(3) development mode</title>
      <link>/post/webpack/2016-08-08-webpack-devmode/</link>
      <pubDate>Mon, 08 Aug 2016 18:00:00 +0000</pubDate>
      
      <guid>/post/webpack/2016-08-08-webpack-devmode/</guid>
      <description>本篇紀錄使用webpack做為webapp開發工具,需要設定當程式碼變動時自動建置,建置後可以反映結果在本機的browser上
github source code Table of contents  watch mode html webpack plugin webpack browser plugin  1. watch mode webpack config檔設定監看模式,在程式碼變更時,會自動地rebuild
 ... module.exports = { watch:true, #=&amp;gt; 增加這一屬性,就能增加監看模式 entry: &#39;./src/app.js&#39;, output: { path: &#39;./bin&#39;, filename: &#39;app.bundle.js&#39; }, ...  2. html webpack plugin 使用html webpack plugin可以在build完成後,產生html檔並加入app.bundle.js的資源標籤在html檔中
安裝html webpack plugin
npm install html-webpack-plugin --save-dev  增加設定在webpack config檔
 ... plugins: [ new webpack.optimize.UglifyJsPlugin({ compress: { warnings: false, }, output: { comments: false, }, }), new HtmlWebpackPlugin({ #=&amp;gt; 增加plugin filename: &#39;index.</description>
    </item>
    
    <item>
      <title>webpack(2) basic configure file usage note</title>
      <link>/post/webpack/2016-08-06-webpack-configfile-usage-note/</link>
      <pubDate>Sat, 06 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/webpack/2016-08-06-webpack-configfile-usage-note/</guid>
      <description>本篇紀錄簡易使用configure file來作為webpack的建置設定檔
github source code
Table of contents  setup my project webpack config file use uglify js plugin  1. setup my project 作為前一篇webpack basic usage note的後續,
首先參照官網的圖片來設置我的JS專案
 . ├── src/ | └── cats.js | └── dogs.js | └── app.js └── bin/ | └── app.bundle.js #=&amp;gt; 由webpack產出 └── web.config.js  2. webpack config file web.config.js是預設webpack會讀取的設定檔檔名,內容如下,
這樣設定檔也被作為一個功能模組來使用.
 module.exports = { entry: &#39;./src/app.js&#39;, output: { path: &#39;./bin&#39;, filename: &#39;app.</description>
    </item>
    
    <item>
      <title>webpack(1) basic usage note</title>
      <link>/post/webpack/2016-08-05-webpack-basic-usage-note/</link>
      <pubDate>Fri, 05 Aug 2016 15:00:00 +0000</pubDate>
      
      <guid>/post/webpack/2016-08-05-webpack-basic-usage-note/</guid>
      <description>本篇紀錄從webpack入門用法,學習模組化的程式碼撰寫方式
Table of contents  CommonJS Modules modules by webpack how webpack implement  1. CommonJS Modules webpack文件上用的模組化撰寫語法在webpack commonjs,及commonjs官網上都有描述該定義 ,如果有學過其他物件導向語言,概念上應該八九不離十. 如下有3支js, app.js 為應用程式的進入點.
 //cats.js :提供cats功能 var cats = [&#39;dave&#39;, &#39;henry&#39;, &#39;martha&#39;]; module.exports = cats; //dogs.js :引用cats,然後提供dogs功能 cats = require(&#39;./cats.js&#39;); var dogs = [&#39;bruce&#39;, &#39;snoopy&#39;, &#39;pebuty&#39;]; module.exports = dogs; //app.js :引用dogs,cats cats = require(&#39;./cats.js&#39;); dogs = require(&#39;./dogs.js&#39;); console.log(cats);  雖然這麼寫,實際上module一開始就沒定義,
這邊就可以讓webpack幫我們實作出模組化的概念.
2. modules by webpack  //用npm安裝webpack npm install webpack -g //給程式進入點的檔名,和打包完成後的檔名 webpack .</description>
    </item>
    
    <item>
      <title>spring boot &#43; spring data mongoDB &#43; spring data rest</title>
      <link>/post/2016-08-04-springboot-springdatamongodb-springdatarest/</link>
      <pubDate>Thu, 04 Aug 2016 16:00:00 +0000</pubDate>
      
      <guid>/post/2016-08-04-springboot-springdatamongodb-springdatarest/</guid>
      <description>本篇紀錄使用最簡易的設定來建立server-api app,
spring boot + spring data mongoDB + spring data rest
Table of contents  create POM file create Domain class create DAO interface create app entry configure Repository Rest Configuration  1. create POM file 主要是在pom.xml內增加以下lib依賴設定 * spring-boot-starter-parent * spring-boot-starter-web * spring-boot-starter-data-mongodb * spring-boot-starter-data-rest
2. create Domain class 建立需要用到的Domain類別
 //建立抽象的Domain類別來放常用的屬性 public abstract class Domain { String creator; Date createDate; String updator; Date updateDate; ... } //建立需要的Domain類別 public class Article extends Domain { @Id private String articleId; private String title; private String content; private Long feedbackNum; .</description>
    </item>
    
  </channel>
</rss>